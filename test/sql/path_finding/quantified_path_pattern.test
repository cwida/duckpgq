

require duckpgq

statement ok
CREATE TABLE Person (
    ID BIGINT,
    Name VARCHAR
);

statement ok
CREATE TABLE Knows (
    Person1ID BIGINT,
    Person2ID BIGINT
);

statement ok
INSERT INTO Person VALUES (1, 'Alice'), (2, 'Bob'), (3, 'Charlie'), (4, 'Diana');

statement ok
INSERT INTO Knows (Person1ID, Person2ID) VALUES (1, 2), (1, 3), (2, 4);

statement ok
-create property graph g
    vertex tables (person)
    edge tables (
        knows
            source key (person1id) references person (id)
            destination key (person2id) references person (id)
    );

statement error
-FROM GRAPH_TABLE (g
    MATCH p = ANY SHORTEST (a:person)-[k:knows]->{0,0}(b:person)
    WHERE a.id = 10
    COLUMNS (a.id as a_id, b.id as b_id)
);
----
Binder Error: Lower bound must be non-negative. The upper value must be positive and greater than or equal to the lower bound value.

query II
-FROM GRAPH_TABLE (g
    MATCH
    ANY SHORTEST (a:person)-[k:knows]->{1,1}(b:person)
    COLUMNS (a.id as a_id, b.id as b_id)
    )
ORDER BY a_id, b_id;
----
1	2
1	3
2	4

statement error
-FROM GRAPH_TABLE (g
    MATCH (a:person)-[k:knows]->{0,0}(b:person)
    COLUMNS (a.id as a_id, b.id as b_id)
    );
----
Binder Error: Lower bound must be non-negative. The upper value must be positive and greater than or equal to the lower bound value.

query II
-FROM GRAPH_TABLE (g
    MATCH
    ANY SHORTEST (a:person)-[k:knows]->{0,1}(b:person)
    COLUMNS (a.id as a_id, b.id as b_id)
    )
ORDER BY a_id, b_id;
----
1	1
1	2
1	3
2	2
2	4
3	3
4	4


# query IIII
# -FROM GRAPH_TABLE (g
#     MATCH p = ANY SHORTEST (a:person)-[k:knows]->{0,1}(b:person)
#     WHERE a.id = 10
#     COLUMNS (a.id as a_id, b.id as b_id, path_length(p) as path_length, element_id(p) as path)
# );
# ----
# 10	10	1	[0, 2, 0]
# 10	30	1	[0, 1, 2]
#
#
# query IIII
# -FROM GRAPH_TABLE (g
#     MATCH p = ANY SHORTEST (a:student)-[k:know]->{0,1}(b:student)
#     WHERE a.id = 10
#     COLUMNS (a.id as a_id, b.id as b_id, path_length(p) as path_length, element_id(p) as path)
# );
# ----
# 10	10	1	[0, 2, 0]
# 10	30	1	[0, 1, 2]

