# name: test/sql/sqlpgq/shortest_path_bound.test
# group: [sqlpgq]

statement ok
pragma enable_verification

require duckpgq

# Graph to test regular shortest path bound
# (0) -> (1)
#  ↓      ↑
# (2) -> (3)

statement ok
CREATE TABLE Point(id BIGINT); INSERT INTO Point VALUES (0), (1), (2), (3);

statement ok
CREATE TABLE know(src BIGINT, dst BIGINT); INSERT INTO know VALUES (0, 1), (0, 2), (2, 3), (3, 1);

statement ok
-CREATE PROPERTY GRAPH pg
VERTEX TABLES (
    Point PROPERTIES ( id ) LABEL Pnt
    )
EDGE TABLES (
    know    SOURCE KEY ( src ) REFERENCES Point ( id )
            DESTINATION KEY ( dst ) REFERENCES Point ( id )
            LABEL Knows
    );

query III
WITH cte1 AS (
    SELECT  CREATE_CSR_EDGE(
            0,
            (SELECT count(a.id) FROM Point a),
            CAST (
                (SELECT sum(CREATE_CSR_VERTEX(
                            0,
                            (SELECT count(a.id) FROM Point a),
                            sub.dense_id,
                            sub.cnt)
                            )
                FROM (
                    SELECT a.rowid as dense_id, count(k.src) as cnt
                    FROM Point a
                    LEFT JOIN Know k ON k.src = a.id
                    GROUP BY a.rowid) sub
                )
            AS BIGINT),
            a.rowid,
            c.rowid,
            k.rowid) as temp
    FROM Know k
    JOIN Point a on a.id = k.src
    JOIN Point c on c.id = k.dst
) SELECT a.id as srd_id, b.id as dst_id, iterativelength(0, (select count(*) from Point), a.rowid, b.rowid, 2, 3) as path_length
        FROM Point a, Point b, (select count(cte1.temp) * 0 as temp from cte1) __x
        WHERE a.id = 0 and __x.temp * 0 + iterativelength(0, (select count(*) from Point), a.rowid, b.rowid, 2, 3);
----
0	1	3
0	3	2

query III
WITH cte1 AS (
    SELECT  CREATE_CSR_EDGE(
            0,
            (SELECT count(a.id) FROM Point a),
            CAST (
                (SELECT sum(CREATE_CSR_VERTEX(
                            0,
                            (SELECT count(a.id) FROM Point a),
                            sub.dense_id,
                            sub.cnt)
                            )
                FROM (
                    SELECT a.rowid as dense_id, count(k.src) as cnt
                    FROM Point a
                    LEFT JOIN Know k ON k.src = a.id
                    GROUP BY a.rowid) sub
                )
            AS BIGINT),
            a.rowid,
            c.rowid,
            k.rowid) as temp
    FROM Know k
    JOIN Point a on a.id = k.src
    JOIN Point c on c.id = k.dst
) SELECT a.id, b.id, iterativelength(0, (select count(*) from Point), a.rowid, b.rowid, 1, 3) as path_length
        FROM Point a, Point b, (select count(cte1.temp) * 0 as temp from cte1) __x
        WHERE a.id = 0 and __x.temp * 0 + iterativelength(0, (select count(*) from Point), a.rowid, b.rowid, 1, 3);
----
0	1	1
0	2	1
0	3	2

# Graph to test shortest path bound with a cycle
# (0) --> (1) <-> (2)
# 0 to 1 is 1 hop

statement ok
CREATE TABLE Point2(id BIGINT); INSERT INTO Point2 VALUES (0), (1), (2);

statement ok
CREATE TABLE know2(src BIGINT, dst BIGINT); INSERT INTO know2 VALUES (0, 1), (1, 2), (2, 1);

statement ok
-CREATE PROPERTY GRAPH pg2
VERTEX TABLES (
    Point2 PROPERTIES ( id ) LABEL Pnt2
    )
EDGE TABLES (
    know2   SOURCE KEY ( src ) REFERENCES Point2 ( id )
            DESTINATION KEY ( dst ) REFERENCES Point2 ( id )
            LABEL Knows2
    );

query III
WITH cte1 AS (
    SELECT  CREATE_CSR_EDGE(
            0,
            (SELECT count(a.id) FROM Point2 a),
            CAST (
                (SELECT sum(CREATE_CSR_VERTEX(
                            0,
                            (SELECT count(a.id) FROM Point2 a),
                            sub.dense_id,
                            sub.cnt)
                            )
                FROM (
                    SELECT a.rowid as dense_id, count(k.src) as cnt
                    FROM Point2 a
                    LEFT JOIN know2 k ON k.src = a.id
                    GROUP BY a.rowid) sub
                )
            AS BIGINT),
            a.rowid,
            c.rowid,
            k.rowid) as temp
    FROM know2 k
    JOIN Point2 a on a.id = k.src
    JOIN Point2 c on c.id = k.dst
) SELECT a.id, b.id, iterativelength(0, (select count(*) from Point2), a.rowid, b.rowid, 2, 3) as path_length
        FROM Point2 a, Point2 b, (select count(cte1.temp) * 0 as temp from cte1) __x
        WHERE a.id = 0 and __x.temp * 0 + iterativelength(0, (select count(*) from Point2), a.rowid, b.rowid, 2, 3);
----
0	2	2


# Graph to test shortest path bound with a cycle
# (1) <- (0) <-> (2)
# 0 to 1 is 1 hop

statement ok
CREATE TABLE Point3(id BIGINT); INSERT INTO Point3 VALUES (0), (1), (2);

statement ok
CREATE TABLE know3(src BIGINT, dst BIGINT); INSERT INTO know3 VALUES (0, 1), (0, 2), (2, 0);

statement ok
-CREATE PROPERTY GRAPH pg3
VERTEX TABLES (
    Point3 PROPERTIES ( id ) LABEL Pnt
    )
EDGE TABLES (
    know3    SOURCE KEY ( src ) REFERENCES Point3 ( id )
            DESTINATION KEY ( dst ) REFERENCES Point3 ( id )
            LABEL Knows
    );

query III
WITH cte1 AS (
    SELECT  CREATE_CSR_EDGE(
            0,
            (SELECT count(a.id) FROM Point3 a),
            CAST (
                (SELECT sum(CREATE_CSR_VERTEX(
                            0,
                            (SELECT count(a.id) FROM Point3 a),
                            sub.dense_id,
                            sub.cnt)
                            )
                FROM (
                    SELECT a.rowid as dense_id, count(k.src) as cnt
                    FROM Point3 a
                    LEFT JOIN know3 k ON k.src = a.id
                    GROUP BY a.rowid) sub
                )
            AS BIGINT),
            a.rowid,
            c.rowid,
            k.rowid) as temp
    FROM know3 k
    JOIN Point3 a on a.id = k.src
    JOIN Point3 c on c.id = k.dst
) SELECT a.id, b.id, iterativelength(0, (select count(*) from Point3), a.rowid, b.rowid, 2, 3) as path_length
        FROM Point3 a, Point3 b, (select count(cte1.temp) * 0 as temp from cte1) __x
        WHERE a.id = 0 and __x.temp * 0 + iterativelength(0, (select count(*) from Point3), a.rowid, b.rowid, 2, 3);
----

