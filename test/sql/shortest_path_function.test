# name: test/sql/sqlpgq/shortest_path_bound.test
# group: [sqlpgq]

statement ok
pragma enable_verification

require duckpgq

# Description: Test shortest paths in a graph with cycles.
# Graph Structure:
# (0) <-> (2) <-> (3) -> (1)
#  ↑                      |
#  └----------------------┘

statement ok
CREATE TABLE Point6(id BIGINT); INSERT INTO Point6 VALUES (0), (1), (2), (3);

statement ok
CREATE TABLE know6(src BIGINT, dst BIGINT); INSERT INTO know6 VALUES (0, 2), (2, 0), (2, 3), (3, 2), (3, 1), (1, 0);

statement ok
-CREATE PROPERTY GRAPH pg6
VERTEX TABLES (
    Point6 PROPERTIES ( id ) LABEL Point6
)
EDGE TABLES (
    know6 SOURCE KEY ( src ) REFERENCES Point6 ( id )
          DESTINATION KEY ( dst ) REFERENCES Point6 ( id )
          LABEL know6
);

query IIII
-FROM GRAPH_TABLE (pg6
    MATCH
    p = ANY SHORTEST (a:Point6 where a.id = 0)-[k:know6]->{1,3}(b:Point6 where b.id = 0)
    COLUMNS (a.id as id1, b.id as id2, vertices(p), path_length(p))
	) tmp
	order by tmp.id1, tmp.id2;
----
0	0	[0, 2, 0]	2

query IIII
-FROM GRAPH_TABLE (pg6
    MATCH
    p = ANY SHORTEST (a:Point6 where a.id = 0)-[k:know6]->{0,3}(b:Point6 where b.id = 0)
    COLUMNS (a.id as id1, b.id as id2, vertices(p), path_length(p))
	) tmp
	order by tmp.id1, tmp.id2;
----
0	0	[0]	0