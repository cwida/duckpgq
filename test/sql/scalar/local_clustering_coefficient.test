# name: test/sql/scalar/local_clustering_coefficient.test
# description: Testing the local clustering coefficient calculations
# group: [scalar]

require duckpgq

# Test with a graph having no edges
statement ok
CREATE TABLE IsolatedStudent(id BIGINT, name VARCHAR);INSERT INTO IsolatedStudent VALUES (0, 'Alice'), (1, 'Bob'), (2, 'Charlie');

statement ok
CREATE TABLE NoEdgeKnow(src BIGINT, dst BIGINT);

statement ok
-CREATE PROPERTY GRAPH no_edge_pg
VERTEX TABLES (
    IsolatedStudent
    )
EDGE TABLES (
    NoEdgeKnow    SOURCE KEY ( src ) REFERENCES IsolatedStudent ( id )
            DESTINATION KEY ( dst ) REFERENCES IsolatedStudent ( id )
    );

statement error
select id, local_clustering_coefficient from local_clustering_coefficient(no_edge_pg, isolatedstudent, noedgeknow);
----
Constraint Error: CSR not found. Is the graph populated?


# Test with an empty graph
statement ok
CREATE TABLE EmptyStudent(id BIGINT, name VARCHAR);

statement ok
CREATE TABLE EmptyKnow(src BIGINT, dst BIGINT);

statement ok
-CREATE PROPERTY GRAPH empty_pg
VERTEX TABLES (
    EmptyStudent
    )
EDGE TABLES (
    EmptyKnow    SOURCE KEY ( src ) REFERENCES EmptyStudent ( id )
            DESTINATION KEY ( dst ) REFERENCES EmptyStudent ( id )
    );

query II
select id, local_clustering_coefficient from local_clustering_coefficient(empty_pg, emptystudent, emptyknow);
----

statement ok
CREATE TABLE Student(id BIGINT, name VARCHAR);INSERT INTO Student VALUES (0, 'Daniel'), (1, 'Tavneet'), (2, 'Gabor'), (3, 'Peter'), (4, 'David');

statement ok
CREATE TABLE know(src BIGINT, dst BIGINT, createDate BIGINT);INSERT INTO know VALUES (0,1, 10), (0,2, 11), (0,3, 12), (3,0, 13), (1,2, 14), (1,3, 15), (2,3, 16), (4,3, 17);

statement ok
CREATE TABLE Foo(id BIGINT);INSERT INTO Foo VALUES (0), (1), (2), (3), (4);

statement ok
-CREATE PROPERTY GRAPH pg
VERTEX TABLES (
    Student,
    Foo
    )
EDGE TABLES (
    know    SOURCE KEY ( src ) REFERENCES Student ( id )
            DESTINATION KEY ( dst ) REFERENCES Student ( id )
    );

query II
select id, local_clustering_coefficient from local_clustering_coefficient(pg, student, know);
----
0	1.0
1	1.0
2	1.0
3	0.5
4	0.0

query III
select a.id, a.name, local_clustering_coefficient from local_clustering_coefficient(pg, student, know), student a where a.id = lcc.id;
----
0	Daniel	1.0
1	Tavneet	1.0
2	Gabor	1.0
3	Peter	0.5
4	David	0.0

statement error
select local_clustering_coefficient from local_clustering_coefficient(pgdoesnotexist, student, know), student a where a.id = lcc.id;
----
Invalid Error: Property graph pgdoesnotexist not found

statement error
select local_clustering_coefficient from local_clustering_coefficient(pg, a, know), student a where a.id = lcc.id;
----
Invalid Error: Label 'a' not found. Did you mean the vertex label 'foo'?

statement error
select local_clustering_coefficient from local_clustering_coefficient(pg, student, b), student a where a.id = lcc.id;
----
Invalid Error: Label 'b' not found. Did you mean the edge label 'know'?

statement error
select local_clustering_coefficient from local_clustering_coefficient(pg, foo, student), student a where a.id = lcc.id;
----
Invalid Error: Exact label 'student' found, but it is not a edge table.

statement error
select local_clustering_coefficient from local_clustering_coefficient(pg, student, foo), student a where a.id = lcc.id;
----
Invalid Error: Exact label 'foo' found, but it is not a edge table.

statement ok
import database 'duckdb/data/SNB0.003';

statement ok
-CREATE PROPERTY GRAPH snb
VERTEX TABLES (
    Person
    )
EDGE TABLES (
    Person_knows_person     SOURCE KEY (Person1Id) REFERENCES Person (id)
                            DESTINATION KEY (Person2Id) REFERENCES Person (id)
                            LABEL Knows);

query II
select id, local_clustering_coefficient from local_clustering_coefficient(snb, person, knows);
----
14	0.33333334
16	0.5
32	0.8333333
2199023255557	0.6666667
2199023255573	1.0
2199023255594	0.1904762
4398046511139	0.0
6597069766702	0.0
8796093022234	0.0
8796093022237	0.6666667
8796093022244	0.0
8796093022249	0.4
10995116277761	0.3
10995116277782	0.23809524
10995116277783	0.0
10995116277808	0.0
13194139533342	1.0
13194139533352	0.31111112
13194139533355	0.2
15393162788877	0.0
17592186044443	0.0
17592186044461	1.0
19791209299968	1.0
19791209299987	0.0
21990232555526	0.0
21990232555527	0.0
24189255811081	0.125
24189255811109	1.0
26388279066632	0.0
26388279066641	0.8333333
26388279066655	0.33333334
26388279066658	0.21794872
26388279066668	0.5
28587302322180	0.16666667
28587302322191	0.0
28587302322196	0.8333333
28587302322204	0.2857143
28587302322209	0.0
28587302322223	0.0
30786325577731	0.0
30786325577740	1.0
32985348833291	0.0
32985348833318	0.0
32985348833329	0.0
35184372088834	0.0
35184372088850	0.6666667
35184372088856	0.33333334
35184372088871	0.0
37383395344394	0.0
37383395344409	0.0


# Test with a graph having self-loops
statement ok
CREATE TABLE SelfLoopStudent(id BIGINT, name VARCHAR);INSERT INTO SelfLoopStudent VALUES (0, 'Alice'), (1, 'Bob'), (2, 'Charlie');

statement ok
CREATE TABLE SelfLoopKnow(src BIGINT, dst BIGINT);INSERT INTO SelfLoopKnow VALUES (0,0), (1,1), (2,2);

statement ok
-CREATE PROPERTY GRAPH self_loop_pg
VERTEX TABLES (
    SelfLoopStudent
    )
EDGE TABLES (
    SelfLoopKnow    SOURCE KEY ( src ) REFERENCES SelfLoopStudent ( id )
            DESTINATION KEY ( dst ) REFERENCES SelfLoopStudent ( id )
    );

query II
select id, local_clustering_coefficient from local_clustering_coefficient(self_loop_pg, selfloopstudent, selfloopknow);
----
0	0.0
1	0.0
2	0.0

# Test with a disconnected graph
statement ok
CREATE TABLE DisconnectedStudent(id BIGINT, name VARCHAR);INSERT INTO DisconnectedStudent VALUES (0, 'Alice'), (1, 'Bob'), (2, 'Charlie'), (3, 'Dave'), (4, 'Eve');

statement ok
CREATE TABLE DisconnectedKnow(src BIGINT, dst BIGINT);INSERT INTO DisconnectedKnow VALUES (0,1), (2,3);

statement ok
-CREATE PROPERTY GRAPH disconnected_pg
VERTEX TABLES (
    DisconnectedStudent
    )
EDGE TABLES (
    DisconnectedKnow    SOURCE KEY ( src ) REFERENCES DisconnectedStudent ( id )
            DESTINATION KEY ( dst ) REFERENCES DisconnectedStudent ( id )
    );

query II
select id, local_clustering_coefficient from local_clustering_coefficient(disconnected_pg, disconnectedstudent, disconnectedknow);
----
0	0.0
1	0.0
2	0.0
3	0.0
4	0.0

# Test with a different number of vertices and edges
statement ok
CREATE TABLE VariedStudent(id BIGINT, name VARCHAR);INSERT INTO VariedStudent VALUES (0, 'Alice'), (1, 'Bob'), (2, 'Charlie'), (3, 'Dave'), (4, 'Eve'), (5, 'Frank');

statement ok
CREATE TABLE VariedKnow(src BIGINT, dst BIGINT);INSERT INTO VariedKnow VALUES (0,1), (0,2), (0,3), (1,2), (2,3), (3,4), (4,5);

statement ok
-CREATE PROPERTY GRAPH varied_pg
VERTEX TABLES (
    VariedStudent
    )
EDGE TABLES (
    VariedKnow    SOURCE KEY ( src ) REFERENCES VariedStudent ( id )
            DESTINATION KEY ( dst ) REFERENCES VariedStudent ( id )
    );

query II
select id, local_clustering_coefficient from local_clustering_coefficient(varied_pg, variedstudent, variedknow);
----
0	0.6666667
1	1.0
2	0.6666667
3	0.33333334
4	0.0
5	0.0
